{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/tsvetomir/Documents/Test/lt_todos/lt_todos_rn_ts/utils/LanguageManager.tsx\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, createContext } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { languageOptions, dictionaryList } from \"../localisation\";\nexport var LanguageContext = createContext({\n  userLanguage: 'en',\n  dictionary: dictionaryList.en\n});\nexport var LanguageProvider = function LanguageProvider(_ref) {\n  var children = _ref.children;\n  var defaultLanguage = null;\n  AsyncStorage.getItem('rcml-lang').then(function (v) {\n    return defaultLanguage = v;\n  });\n\n  var _useState = useState(defaultLanguage === null ? 'en' : null),\n      _useState2 = _slicedToArray(_useState, 2),\n      userLanguage = _useState2[0],\n      setUserLanguage = _useState2[1];\n\n  var provider = {\n    userLanguage: userLanguage,\n    dictionary: dictionaryList[userLanguage],\n    userLanguageChange: function userLanguageChange(selected) {\n      var newLanguage;\n      return _regeneratorRuntime.async(function userLanguageChange$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              newLanguage = languageOptions[selected] ? selected : 'en';\n              setUserLanguage(newLanguage);\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem('rcml-lang', newLanguage));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  };\n  return React.createElement(LanguageContext.Provider, {\n    value: provider,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 4\n    }\n  }, children);\n};","map":{"version":3,"sources":["/home/tsvetomir/Documents/Test/lt_todos/lt_todos_rn_ts/utils/LanguageManager.tsx"],"names":["React","useState","createContext","AsyncStorage","languageOptions","dictionaryList","LanguageContext","userLanguage","dictionary","en","LanguageProvider","children","defaultLanguage","getItem","then","v","setUserLanguage","provider","userLanguageChange","selected","newLanguage","setItem"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IACCC,QADD,EAECC,aAFD,QAIO,OAJP;AAKA,OAAOC,YAAP,MAAyB,2CAAzB;AAEA,SAASC,eAAT,EAA0BC,cAA1B;AAEA,OAAO,IAAMC,eAAe,GAAGJ,aAAa,CAAC;AAC5CK,EAAAA,YAAY,EAAE,IAD8B;AAE5CC,EAAAA,UAAU,EAAEH,cAAc,CAACI;AAFiB,CAAD,CAArC;AAKP,OAAO,IAAMC,gBAAmC,GAAG,SAAtCA,gBAAsC,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AACpE,MAAIC,eAAe,GAAG,IAAtB;AAEAT,EAAAA,YAAY,CAACU,OAAb,CAAqB,WAArB,EAAkCC,IAAlC,CAAuC,UAAAC,CAAC;AAAA,WAAIH,eAAe,GAACG,CAApB;AAAA,GAAxC;;AAEA,kBAAwCd,QAAQ,CAACW,eAAe,KAAK,IAApB,GAA2B,IAA3B,GAAkC,IAAnC,CAAhD;AAAA;AAAA,MAAOL,YAAP;AAAA,MAAqBS,eAArB;;AAEA,MAAMC,QAAQ,GAAG;AACfV,IAAAA,YAAY,EAAZA,YADe;AAEfC,IAAAA,UAAU,EAAEH,cAAc,CAACE,YAAD,CAFX;AAGfW,IAAAA,kBAAkB,EAAE,4BAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,cAAAA,WADY,GACEhB,eAAe,CAACe,QAAD,CAAf,GAA4BA,QAA5B,GAAuC,IADzC;AAElBH,cAAAA,eAAe,CAACI,WAAD,CAAf;AAFkB;AAAA,+CAGZjB,YAAY,CAACkB,OAAb,CAAqB,WAArB,EAAkCD,WAAlC,CAHY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHL,GAAjB;AAUA,SACE,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEH,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,QADH,CADF;AAKA,CAtBM","sourcesContent":["import React,{\n useState,\n createContext,\n FunctionComponent\n} from 'react'\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nimport { languageOptions, dictionaryList } from '../localisation';\n\nexport const LanguageContext = createContext({\n userLanguage: 'en',\n dictionary: dictionaryList.en\n});\n\nexport const LanguageProvider: FunctionComponent = ({ children }) => {\n let defaultLanguage = null;\n \n AsyncStorage.getItem('rcml-lang').then(v => defaultLanguage=v)\n\n const [userLanguage, setUserLanguage] = useState(defaultLanguage === null ? 'en' : null);\n\n const provider = {\n   userLanguage,\n   dictionary: dictionaryList[userLanguage],\n   userLanguageChange: async (selected: string | number) => {\n     const newLanguage = languageOptions[selected] ? selected : 'en'\n     setUserLanguage(newLanguage);\n     await AsyncStorage.setItem('rcml-lang', newLanguage);\n   }\n };\n\n return (\n   <LanguageContext.Provider value={provider}>\n     {children}\n   </LanguageContext.Provider>\n );\n};"]},"metadata":{},"sourceType":"module"}