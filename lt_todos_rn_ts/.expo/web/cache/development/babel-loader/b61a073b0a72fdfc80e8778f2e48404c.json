{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/tsvetomir/Documents/Test/lt_todos/lt_todos_rn_ts/utils/ThemeManager.tsx\";\n\nimport React, { useState, createContext } from 'react';\nexport var ThemeContext = createContext('light');\nexport var ThemeProvider = function ThemeProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState('Light'),\n      _useState2 = _slicedToArray(_useState, 2),\n      themeColor = _useState2[0],\n      setThemeColor = _useState2[1];\n\n  var toggleTheme = function toggleTheme() {\n    if (themeColor === 'Light') {\n      setThemeColor('Dark');\n    } else {\n      setThemeColor('Light');\n    }\n  };\n\n  return React.createElement(ThemeContext.Provider, {\n    value: {\n      themeColor: themeColor,\n      toggleTheme: toggleTheme\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 3\n    }\n  }, children);\n};","map":{"version":3,"sources":["/home/tsvetomir/Documents/Test/lt_todos/lt_todos_rn_ts/utils/ThemeManager.tsx"],"names":["React","useState","createContext","ThemeContext","ThemeProvider","children","themeColor","setThemeColor","toggleTheme"],"mappings":";;;;;AAAA,OAAOA,KAAP,IACEC,QADF,EAEEC,aAFF,QAIO,OAJP;AAMA,OAAO,IAAMC,YAAY,GAAGD,aAAa,CAAC,OAAD,CAAlC;AAEP,OAAO,IAAME,aAAgC,GAAG,SAAnCA,aAAmC,OAAgB;AAAA,MAAdC,QAAc,QAAdA,QAAc;;AAE9D,kBAAoCJ,QAAQ,CAAS,OAAT,CAA5C;AAAA;AAAA,MAAOK,UAAP;AAAA,MAAmBC,aAAnB;;AAGA,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAY;AAC7B,QAAGF,UAAU,KAAK,OAAlB,EAA0B;AACzBC,MAAAA,aAAa,CAAC,MAAD,CAAb;AACA,KAFD,MAEO;AACNA,MAAAA,aAAa,CAAC,OAAD,CAAb;AACA;AACH,GAND;;AAQD,SACC,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAACD,MAAAA,UAAU,EAAVA,UAAD;AAAYE,MAAAA,WAAW,EAAXA;AAAZ,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,QADH,CADD;AAKA,CAlBM","sourcesContent":["import React,{\n  useState,\n  createContext,\n  FunctionComponent\n} from 'react'\n\nexport const ThemeContext = createContext('light');\n\nexport const ThemeProvider: FunctionComponent = ({children}) => {\n\n  const [themeColor, setThemeColor] = useState<String>('Light');\n\n \n  const toggleTheme = (): void => {\n     if(themeColor === 'Light'){\n      setThemeColor('Dark')\n     } else {\n      setThemeColor('Light')\n     }\n  }\n\n return (\n  <ThemeContext.Provider value={{themeColor,toggleTheme}}>\n    {children}\n  </ThemeContext.Provider>\n )\n}"]},"metadata":{},"sourceType":"module"}